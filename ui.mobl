module ui

mixin mobl::ui::generic

control customMasterDetail(items : Collection<Dynamic>, masterItem : Control1<Dynamic>, detail : Control1<Dynamic>) {
  group {
    list(it in items) {
      customItem(onclick={ customDetailScreen(it, detail); }) {
        masterItem(it)
      }
    }
  }
}

screen customDetailScreen(it : Dynamic, detail : Control1<Dynamic>) {
  // customHeader("Detail") {
    backButton("Back", onclick={ screen return; })
  // }
  detail(it)
}

// @when window.innerWidth > 500
// control masterDetail(items : Collection<Dynamic>, masterItem : Control1<Dynamic>, detail : Control1<Dynamic>) {
//   var current : Dynamic = items.one()
//   <div width="100%">
//     <div style="float:left; width:33%; position:relative; border-right: solid 1px #cccccc;">
//       group {
//         list(it in items) {
//           when(it == current) {
//             item(style=selectedItemStyle) {
//               masterItem(it)
//             }
//           } else {
//             item(hideArrow=true, onclick={ current = it; }) {
//               masterItem(it)
//             }
//           }
//         }
//       }
//     </div>
//     <div style="float:left; width:66.5%; position:relative; margin-left: 0.5%;">
//       detail(current)
//     </div>
//   </div>
// }

style customHeaderStyle {
  padding: 0;
  height: 4.3em;
  font-size: 0.9em;
  line-height: 1.3em;
  font-weight: bold;
  text-align: center;
  text-shadow: #477 0px 1px 1px;
  color: white;
  font-weight: bold;
  margin: 0;
  z-index: 2;
}

style customHeaderContainerStyle {
  width: 150px;
  position: absolute;
  left: 50%;
}

style customHeaderTextStyle {
  position: absolute;
  left: -115px;
  width: 240px;
  margin-top: 14px;
  vertical-align: middle;
  // white-space: nowrap;
  // overflow: hidden;
  // text-overflow: ellipsis;
}

control customHeader(text : String, onclick : Callback = null) {
  <div class=customHeaderStyle onclick=onclick>
    <div class=customHeaderContainerStyle><div databind=text class=customHeaderTextStyle/></div>
    elements()
  </div>
}

style mixin customItemMixin($fontColor, $backgroundColor) {
  // background-color: $backgroundColor;
  // color: $fontColor;
  // border-bottom: 1px solid #cccccc;
  border-left: 0;
  border-right: 0;
  display: block;
  font-size: 17px;
  margin-bottom: -1px;
  padding: 12px 10px;
  text-decoration: none;

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

style customItemStyle {
  customItemMixin(#000, #fff);
}

style customItemPushedStyle {
  customItemMixin(#eee, $baseColor);
}

style customItemArrowStyle {
  background-image: url("generic/arrow.png");
  background-position: right center;
  background-repeat: no-repeat;
}

control customItem(itemStyle : Style = customItemStyle, pushedStyle : Style = customItemPushedStyle, onclick : Callback = null, onswipe : Callback = null, hideArrow : Bool = false) {
  var pushed = false
  el@<li class=customItemStyle class=onclick && hideArrow == false ? mergeStyles([pushed ? pushedStyle : customItemStyle, customItemArrowStyle]) : (pushed ? customItemPushedStyle : customItemStyle)
  onclick=onclick ? {
    pushed = true;
    sleep(100);
    async {
      onclick(event);
    }
    sleep(200);
    pushed = false;
  } : null>
    elements()
  </li>
}

style customTabbarStyle customActiveTabStyle {
  // width: auto;
  // display: inline-block;
  // margin-top: 10px;
  // margin-bottom: 0;
  // margin-left: auto;
  // margin-right: auto;
  // margin-top: 0.3em;
}

style customTabbarStyle customActiveTabButtonStyle {
  margin-left: 10px;
  margin-right: 10px;
  margin-bottom: 0px;
  line-height: 39px;
  height: 39px;
}

style customTabbarStyle customInActiveTabButtonStyle {
  margin-left: 10px;
  margin-right: 10px;
  margin-bottom: 0px;
  line-height: 48px;
  height: 48px;
  vertical-align: bottom;
}

style customTabbarStyle {
  text-align: left;
  font-size: 8px;
  z-index: 3;
  width: 100%;
  margin-top: 0em;
  margin-bottom: 0;
  margin-left: 20px;
  height: 48px;
}

control customTabSet(tabs : [(String, String, Control)]) {
  var activeTabName : String = tabs.get(0)._1
  var s = ""

  <div style="height: 340px; margin-left: 25px; margin-top: 10px">
	  list((tabName, tabIcon, tabControl) in tabs) {
	    block(activeTabName == tabName ? customActiveTabStyle : inActiveTabStyle) {
	      screenContext {
	        tabControl()
	      }
	    }
	  }
  </div>

  block(customTabbarStyle) {
    list((tabName, tabIcon, tabControl) in tabs) {
      span(onclick={ activeTabName = tabName; }, cssClass=activeTabName == tabName ? customActiveTabButtonStyle : customInActiveTabButtonStyle) {
        label(tabName)
      }
    }
  }

}

control rangeField(s : String, style : Style = null, min : Num = 0, max : Num = 10, start : Num = 0) {
	<div style="width: 250px;">
	  slider@<div/>
	  script {
	    slider.slider(Dynamic(value=start, min=min, max=max, step=1, change={
	        s = slider.slider("value");
	        start = slider.slider("value");
	      }));
	  }
  </div>
}

style $baseColor = rgb(150, 80, 0)

style title {
  padding: 10px;
  font-size: 2em;
}

style left {
  display: inline;
  font-size: 0.8em;
  margin: 0 0 10px 0;
  float: left;
}

style right {
  display: inline;
  font-size: 0.8em;
  margin: 0 0 10px 0;
  float: right;
}

style center {
  display: inline;
  font-size: 1em;
  margin: 0 0 10px 0;
  float: center;
}

style ranger {
  width: 250px;
}

style action {
  margin-top: 14px;
  margin-left: 109px;
}

style main {
  height: 274px;
  width: 269px;
}

style navigator {
  margin-left: 30px;
}

style stressGraphButton {
  margin-left: 5px;
  margin-right: 5px;
}

style root {
  background-image: url("resources/images/background_test2.png");
  background-repeat: no-repeat;
  height: 500px;
  width: 315px;
  position: absolute;
}

style flash {
  display: none;
  float: left;
  clear: both;
  position:absolute;
  margin-left:-25px;
  margin-top:-79px;
}

style transition {
  margin-left: -252px;
  margin-top: 185px;
  float: left;
  position: absolute;
}
